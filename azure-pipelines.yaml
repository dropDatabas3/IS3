# Azure DevOps Pipeline CI para aplicación IS3
# Frontend: Next.js + Backend: Go
# CI Pipeline con Self-Hosted Agent según TP04 requirements

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - decisiones.md
      - '*.md'

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - decisiones.md
      - '*.md'

# Variables globales
variables:
  # Pool del self-hosted agent
  agentPool: 'TP4_IS3'
  
  # Versioning
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(variables['Build.SourceBranchName'], 0)]
  buildVersion: '$(majorVersion).$(minorVersion).$(patchVersion)'
  
  # Paths del proyecto
  frontendPath: 'ucc-arq-soft-front'
  backendPath: 'ucc-soft-arch-golang'

stages:
  # ============================================
  # STAGE CI: BUILD, TEST Y PUBLISH ARTIFACTS
  # ============================================
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      # ==========================================
      # JOB 1: Build Frontend (Next.js)
      # ==========================================
      - job: BuildFrontend
        displayName: 'Build Frontend (Next.js)'
        pool:
          name: $(agentPool)
        
        steps:
          - checkout: self
            clean: true
            displayName: 'Checkout Source Code'

          - task: NodeTool@0
            displayName: 'Use Node.js 18.x'
            inputs:
              versionSpec: '18.x'
              checkLatest: true

          - script: |
              cd $(frontendPath)
              echo "Installing frontend dependencies..."
              npm ci --silent --prefer-offline
            displayName: 'Install Frontend Dependencies'
            
          - script: |
              cd $(frontendPath)
              echo "Running frontend linting..."
              npm run lint
            displayName: 'Run Frontend Linting'
            continueOnError: true

          - script: |
              cd $(frontendPath)
              echo "Building frontend application..."
              npm run build
            displayName: 'Build Frontend Application'
            env:
              NEXT_PUBLIC_API_URL: 'http://localhost:8000'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Frontend Build (.next)'
            inputs:
              PathtoPublish: '$(frontendPath)/.next'
              ArtifactName: 'frontend-dist'
              publishLocation: 'Container'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Frontend Dependencies'
            inputs:
              PathtoPublish: '$(frontendPath)/package.json'
              ArtifactName: 'frontend-config'
              publishLocation: 'Container'

      # ==========================================
      # JOB 2: Build Backend (Go)
      # ==========================================
      - job: BuildBackend
        displayName: 'Build Backend (Go)'
        pool:
          name: $(agentPool)
        
        steps:
          - checkout: self
            clean: true
            displayName: 'Checkout Source Code'

          - task: GoTool@0
            displayName: 'Use Go 1.22.x'
            inputs:
              version: '1.22.x'

          - script: |
              cd $(backendPath)
              echo "Go version: $(go version)"
              echo "Downloading dependencies..."
              go mod download
              go mod verify
            displayName: 'Download Backend Dependencies'

          - script: |
              cd $(backendPath)
              echo "Running static analysis..."
              go vet ./...
            displayName: 'Run Go Vet (Static Analysis)'
            continueOnError: true

          - script: |
              cd $(backendPath)
              echo "Checking code formatting..."
              go fmt ./...
            displayName: 'Check Go Formatting'
            continueOnError: true

          - script: |
              cd $(backendPath)
              echo "Building backend binary..."
              mkdir -p bin
              CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ./bin/app ./main.go
              echo "Build completed. Binary size:"
              ls -lh ./bin/app
            displayName: 'Build Backend Binary'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Binary'
            inputs:
              PathtoPublish: '$(backendPath)/bin'
              ArtifactName: 'backend-bin'
              publishLocation: 'Container'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Dependencies'
            inputs:
              PathtoPublish: '$(backendPath)/go.mod'
              ArtifactName: 'backend-config'
              publishLocation: 'Container'

      # ==========================================
      # JOB 3: Publish Summary (Informativo)
      # ==========================================  
      - job: PublishSummary
        displayName: 'Build Summary'
        dependsOn: 
          - BuildFrontend
          - BuildBackend
        pool:
          name: $(agentPool)
        
        steps:
          - script: |
              echo "======================================"
              echo "    CI BUILD COMPLETED SUCCESSFULLY   "
              echo "======================================"
              echo "Build Version: $(buildVersion)"
              echo "Frontend: Next.js build completed"
              echo "Backend: Go binary compiled"
              echo "Artifacts published to Azure DevOps"
              echo ""
              echo "Published Artifacts:"
              echo "- frontend-dist (Next.js .next folder)"
              echo "- frontend-config (package.json)"
              echo "- backend-bin (Go binary)"
              echo "- backend-config (go.mod)"
              echo "======================================"
            displayName: 'Display Build Summary'
